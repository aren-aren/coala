<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 

 <mapper namespace="com.groupb.cuiz.web.member.MemberDAO">
 	
 	<!-- 카카오 로그인관련 -->
 	<insert id="setKakao" parameterType="MemberDTO">
 		INSERT INTO MEMBER
 		(MEMBER_ID,MEMBER_TOKEN,MEMBER_NICK) VALUES (#{member_ID},1,#{member_Nick})
 	</insert>
 	<!-- 내 아이디가 있는지 체크 WHY ? 기억안남 -->
 	<select id="getAll" parameterType="MemberDTO" resultType="int">
 		SELECT COUNT(MEMBER_ID) FROM MEMBER WHERE MEMBER_ID =#{member_ID}
 	</select>
 	<!-- 로그인 -->
 	<select id="getKakaoLogin" resultType="MemberDTO" parameterType="MemberDTO">
 		SELECT * FROM MEMBER WHERE MEMBER_ID = #{member_ID}
 	</select>
 	<!--  카카오 닉네임이 db에 있는지 확인 -->
 	<select id="getKakaoNickCount" resultType="int" parameterType="MemberDTO">
 		SELECT COUNT(MEMBER_NICK) FROM MEMBER WHERE MEMBER_NICK LIKE #{member_Nick}||'#%' 
 	</select>
 	
 	<!-- 굳이굳이 네이버로그인 따로 만들거임 태클 ㄴ -->
 	<insert id="setNaver" parameterType="MemberDTO">
 		INSERT INTO MEMBER
 		(MEMBER_ID,MEMBER_TOKEN,MEMBER_NICK,MEMBER_EMAIL) VALUES
 		(#{member_ID},#{member_Token},#{member_Nick},#{member_Email})
 	</insert>
 	<!-- 네이버 로그인 계정있는지 확인 -->
 	<select id="getNaver" parameterType="MemberDTO" resultType="int" >
 		SELECT COUNT(MEMBER_ID) FROM MEMBER WHERE MEMBER_ID = #{member_ID} AND MEMBER_TOKEN = #{member_Token}
 	</select>
 	<!-- 네이버 로그인 계정 디테일 -->
 	<select id="naver_login" parameterType="MemberDTO" resultType="MemberDTO">
 		SELECT * FROM MEMBER WHERE MEMBER_ID = #{member_ID}
 	</select>
 	
 	<!-- 회원가입 -->
 	<insert id="setJoin" parameterType="MemberDTO">
 		INSERT INTO MEMBER
 		(MEMBER_ID,MEMBER_PASSWORD,MEMBER_EMAIL,MEMBER_NICK,MEMBER_PROFILE_BLOB,MEMBER_PHONENUMBER)
 		VALUES
 		(#{member_ID},#{member_Password},#{member_Email},#{member_Nick},#{member_Profile_Blob},#{member_PhoneNumber})
 	</insert>
 	
 	
 	<!-- pager part -->
 	<!-- 회원 리스트 -->
 	<select id="getCommonTotalCount" resultType="Long">
 		SELECT COUNT(MEMBER_ID) FROM MEMBER WHERE MEMBER_DELDATE IS NULL
 	</select>
 	<!-- 회원 탈퇴된 계정 리스트-->
 	<select id="getDeleteTotalCount" resultType="Long">
 		SELECT COUNT(MEMBER_ID) FROM MEMBER WHERE MEMBER_DELDATE IS NOT NULL
 	</select>
 	
 	<!-- 관리자 페이지 MEMBER/LIST  ( 권한변경 가능) -->
 	<select id="getList" parameterType="Pager" resultType="MemberDTO">
 	SELECT * FROM
  		(SELECT ROWNUM R, N.*FROM
  			(
  				SELECT * FROM MEMBER
  				WHERE MEMBER_FLAG = 0
  			)
  		N)
  	WHERE R BETWEEN #{startRow} AND #{lastRow}
  	ORDER BY ROWNUM ASC
 	</select>
	<!-- 탈퇴 된 계정들 가져오기 -->
	<select id="delete_list" parameterType="Pager" resultType="MemberDTO">
			SELECT * FROM
  		(SELECT ROWNUM R, N.*FROM
  			(
  				SELECT * FROM MEMBER
  				WHERE MEMBER_FLAG = 1
  			)
  		N)
  	WHERE R BETWEEN #{startRow} AND #{lastRow}
  	ORDER BY ROWNUM ASC
	</select>
	<!-- 계정 복구 -->
	<update id="user_recovered" parameterType="MemberDTO">
		UPDATE MEMBER SET MEMBER_FLAG = 0,MEMBER_DELDATE =NULL WHERE MEMBER_ID = #{member_ID}
	</update>
	
	
	<!-- 테스트 --> 	
 	<select id="get" resultType="MemberDTO">
 		SELECT MEMBER_PROFILE "member_Profile_byte"
 		FROM MEMBER WHERE MEMBER_ID = '1234324'
 	</select>
 	
 	<select id="getDetail" resultType="MemberDTO" parameterType="MemberDTO">
 		SELECT * FROM MEMBER WHERE MEMBER_ID = #{member_ID} AND ( MEMBER_PASSWORD = #{member_Password} OR MEMBER_TOKEN >0 )
 	</select>
 	

	<!-- 중복체크 -->
 	<select id="setIdcheck" resultType="int" parameterType="MemberDTO">
 		SELECT COUNT(MEMBER_ID) FROM MEMBER WHERE MEMBER_ID = #{member_ID}
 	</select>
 	
 	<select id="setNickcheck" resultType="int" parameterType="MemberDTO">
 		SELECT COUNT(MEMBER_NICK) FROM MEMBER WHERE MEMBER_NICK = #{member_Nick}
 	</select>
 	
 	
 	  
 	  
 	<!-- 회원정보 수정 -->
 	<update id="setUpdate" parameterType="MemberDTO">
 		UPDATE MEMBER <set>
 		<if test="member_Password != '' and member_Password != null"> MEMBER_Password =#{member_Password},</if>
 		<if test="member_Email != '' and member_Email != null ">MEMBER_EMAIL = #{member_Email},</if>
 		<if test="member_PhoneNumber != '' and member_PhoneNumber != null ">MEMBER_PHONENUMBER = #{member_PhoneNumber},</if>
 		</set>
 		,MEMBER_PROFILE_BLOB = #{member_Profile_Blob}
 		WHERE MEMBER_ID = #{member_ID}
 	</update>
 	
 	
 	<!-- 계정탈퇴 플래그1로 변경 및 오늘날짜로 탈퇴일 지정 -->
 	<update id="setDelete" parameterType="MemberDTO">
 		UPDATE MEMBER SET MEMBER_FLAG = 1 , MEMBER_DELDATE = SYSDATE
 		WHERE MEMBER_ID = #{member_ID}
 	</update>
 	<!-- deldate 랑 현재 날짜랑 3일 차이 나면 삭제 -->
 	<delete id="realDelete">
 		DELETE FROM MEMBER WHERE SYSDATE-MEMBER_DELDATE >3
 	</delete>
 	
 	
 	<!-- 멤버 권한 변경 -->
 	<!-- 회원의 권한 이름 변경 -->
 	<update id="setUpdateRole" parameterType="MemberDTO">
 		UPDATE MEMBER SET
 		MEMBER_ROLE  =#{member_Role}
 		WHERE MEMBER_ID = #{member_ID}
 	</update>
 	<!-- 관리자 > 멤버로 변경시 관리자 100번 권한 삭제  -->
 	<delete id="deleteRole" parameterType="RoleDTO">
 		DELETE MEMBER_ROLE WHERE MEMBER_ID = #{member_ID} AND ROLE_NUM = 100
 	</delete>
 	<!-- 멤버 > 관리자 변경시 관리자 권한 추가 -->
 	<insert id="insertRole" parameterType="RoleDTO">
 		INSERT INTO MEMBER_ROLE VALUES(#{member_ID},100)
 	</insert>
 	<!-- 회원가입 시 멤버(200)번 권한 발행 -->
 	<insert id="setDefaultRole" parameterType="MemberDTO">
 		INSERT INTO MEMBER_ROLE VALUES(#{member_ID},200)
 	</insert>
 	
 	
 	<!-- 출석 시작 출석일자 조회 -->
 	<select id="getAtendence" parameterType="MemberDTO" resultType="int">
 		SELECT COUNT(MEMBER_ID) FROM ATTENDENCE WHERE MEMBER_ID = #{member_ID} AND AT_DATE = TO_CHAR(SYSDATE,'YYYY-MM-DD')
 	</select>
 	<!-- 출석 기록이없다면 출석 인서트  -->
 	<insert id="setAtendence" parameterType="MemberDTO">
 		INSERT INTO ATTENDENCE (MEMBER_ID,AT_DATE) VALUES(#{member_ID},TO_CHAR(SYSDATE,'YYYY-MM-DD'))

 	</insert>
	<!-- 출석을 인서트하면서 출석점수 지급 --> 	
 	<update id="setCoin" parameterType="MemberDTO">
 		UPDATE MEMBER SET MEMBER_COIN = #{member_Coin} WHERE MEMBER_ID=#{member_ID}
 	</update>
 	<!-- 전날 출석기록이 있는지 확인 -->
 	<select id="getConatt" resultType="int" parameterType="MemberDTO">
 		SELECT COUNT(MEMBER_ID) FROM ATTENDENCE WHERE MEMBER_ID =#{member_ID} AND AT_DATE= TO_CHAR(SYSDATE-1,'YYYY-MM-DD')
 	</select>
 	<!-- 연속 출석 갱신 -->
 	<update id="setConatt" parameterType="MemberDTO">
 		UPDATE MEMBER SET MEMBER_CONATT = #{member_Conatt}+1 WHERE MEMBER_ID=#{member_ID}
 	</update>
 	<!--  7일 연속출석 보너스 -->
 	<update id="setBonus">
 		UPDATE MEMBER SET MEMBER_COIN = #{member_Coin} +10 WHERE MEMBER_ID = #{member_ID}
 	</update>

	<!-- 출석시 출석 +1 -->
	<update id="setTotalAtt" parameterType="MemberDTO">
		UPDATE MEMBER SET MEMBER_TOTALATT = 
			(SELECT COUNT(MEMBER_ID) FROM ATTENDENCE WHERE MEMBER_ID = #{member_ID})
			 WHERE MEMBER_ID = #{member_ID}
	</update>
	
	<update id="setJumsu" parameterType="MemberDTO">
		UPDATE MEMBER SET MEMBER_JUMSU = #{member_Jumsu} WHERE MEMBER_ID = #{member_ID}
	</update>
 	
 	
 	
 	
 </mapper>